"use strict";(self.webpackChunkdspy_tutorial_site=self.webpackChunkdspy_tutorial_site||[]).push([[274],{2615:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"module2/basic-generation","title":"Basic Generation with DSPy","description":"Welcome to Module 2! Let\'s explore the fundamentals of text generation using DSPy, starting from simple prompts and building up to more sophisticated patterns.","source":"@site/docs/module2/basic-generation.md","sourceDirName":"module2","slug":"/module2/basic-generation","permalink":"/dspy/tutorial/module2/basic-generation","draft":false,"unlisted":false,"editUrl":"https://github.com/vibe-school/dspy/tree/main/guide/dspy-tutorial-site/docs/module2/basic-generation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"DSPy Fundamentals","permalink":"/dspy/tutorial/module1/fundamentals"},"next":{"title":"Create a Page","permalink":"/dspy/tutorial/tutorial-basics/create-a-page"}}');var s=t(4848),r=t(8453);const a={sidebar_position:1},o="Basic Generation with DSPy",l={},d=[{value:"Module Processing Flow",id:"module-processing-flow",level:2},{value:"Simple Text Generation",id:"simple-text-generation",level:2},{value:"Adding Constraints and Context",id:"adding-constraints-and-context",level:2},{value:"Working with Multiple Outputs",id:"working-with-multiple-outputs",level:2},{value:"Using Chain of Thought",id:"using-chain-of-thought",level:2},{value:"Structured Output with Pydantic",id:"structured-output-with-pydantic",level:2},{value:"Controlling Generation Parameters",id:"controlling-generation-parameters",level:2},{value:"Common Patterns and Best Practices",id:"common-patterns-and-best-practices",level:2},{value:"1. Validation in Signatures",id:"1-validation-in-signatures",level:3},{value:"2. Contextual Generation",id:"2-contextual-generation",level:3},{value:"3. Iterative Refinement",id:"3-iterative-refinement",level:3},{value:"Hands-On Exercise",id:"hands-on-exercise",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-generation-with-dspy",children:"Basic Generation with DSPy"})}),"\n",(0,s.jsx)(n.p,{children:"Welcome to Module 2! Let's explore the fundamentals of text generation using DSPy, starting from simple prompts and building up to more sophisticated patterns."}),"\n",(0,s.jsx)(n.h2,{id:"module-processing-flow",children:"Module Processing Flow"}),"\n",(0,s.jsx)(n.p,{children:"Understanding how DSPy processes your requests is key to mastering the framework:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Input  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Signature   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Module    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Output  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502                      \u2502\n                  Define I/O              Process with\n                  & Constraints           LLM Strategy\n"})}),"\n",(0,s.jsx)(n.h2,{id:"simple-text-generation",children:"Simple Text Generation"}),"\n",(0,s.jsx)(n.p,{children:"Let's start with the most basic form of generation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import dspy\n\n# Configure your LLM\ndspy.configure(lm=dspy.LM("openai/gpt-4o-mini"))\n\n# Method 1: String signature\ngenerate = dspy.Predict("topic -> text")\nresult = generate(topic="artificial intelligence")\nprint(result.text)\n\n# Method 2: Class-based signature for more control\nclass TextGeneration(dspy.Signature):\n    """Generate text about a given topic."""\n    topic: str = dspy.InputField(desc="The topic to write about")\n    text: str = dspy.OutputField(desc="Generated text about the topic")\n\ngenerate = dspy.Predict(TextGeneration)\nresult = generate(topic="quantum computing")\nprint(result.text)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"adding-constraints-and-context",children:"Adding Constraints and Context"}),"\n",(0,s.jsx)(n.p,{children:"DSPy allows you to add constraints to guide generation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ConstrainedGeneration(dspy.Signature):\n    """Generate text with specific constraints."""\n    topic: str = dspy.InputField()\n    max_words: int = dspy.InputField(desc="Maximum number of words")\n    tone: str = dspy.InputField(desc="Tone of the text (formal/casual/humorous)")\n    text: str = dspy.OutputField(desc="Generated text following all constraints")\n\nconstrained_gen = dspy.Predict(ConstrainedGeneration)\n\nresult = constrained_gen(\n    topic="machine learning",\n    max_words=50,\n    tone="casual"\n)\nprint(result.text)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-multiple-outputs",children:"Working with Multiple Outputs"}),"\n",(0,s.jsx)(n.p,{children:"Generate multiple pieces of content in one call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class MultiOutput(dspy.Signature):\n    """Generate multiple related outputs."""\n    topic: str = dspy.InputField()\n    title: str = dspy.OutputField(desc="A catchy title")\n    summary: str = dspy.OutputField(desc="Brief summary")\n    main_points: list[str] = dspy.OutputField(desc="Key points")\n    conclusion: str = dspy.OutputField(desc="Concluding statement")\n\nmulti_gen = dspy.Predict(MultiOutput)\nresult = multi_gen(topic="renewable energy")\n\nprint(f"Title: {result.title}")\nprint(f"Summary: {result.summary}")\nprint(f"Main Points: {result.main_points}")\nprint(f"Conclusion: {result.conclusion}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-chain-of-thought",children:"Using Chain of Thought"}),"\n",(0,s.jsx)(n.p,{children:"For complex generation tasks, Chain of Thought helps the model reason through its response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ComplexGeneration(dspy.Signature):\n    """Generate a detailed explanation with reasoning."""\n    question: str = dspy.InputField()\n    explanation: str = dspy.OutputField()\n\n# Using ChainOfThought adds reasoning\ncot_gen = dspy.ChainOfThought(ComplexGeneration)\nresult = cot_gen(question="How do neural networks learn?")\n\nprint(f"Reasoning: {result.reasoning}")  # CoT adds this field\nprint(f"Explanation: {result.explanation}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"structured-output-with-pydantic",children:"Structured Output with Pydantic"}),"\n",(0,s.jsx)(n.p,{children:"For type-safe outputs, integrate Pydantic models:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel\nfrom typing import List\n\nclass BlogPost(BaseModel):\n    title: str\n    introduction: str\n    sections: List[str]\n    tags: List[str]\n    word_count: int\n\nclass BlogGeneration(dspy.Signature):\n    """Generate a structured blog post."""\n    topic: str = dspy.InputField()\n    target_audience: str = dspy.InputField()\n    post: BlogPost = dspy.OutputField()\n\nblog_gen = dspy.Predict(BlogGeneration)\nresult = blog_gen(\n    topic="Introduction to DSPy",\n    target_audience="Python developers"\n)\n\n# Access structured data\nprint(f"Title: {result.post.title}")\nprint(f"Tags: {\', \'.join(result.post.tags)}")\nprint(f"Word count: {result.post.word_count}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"controlling-generation-parameters",children:"Controlling Generation Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Fine-tune generation behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class CreativeWriting(dspy.Signature):\n    """Generate creative text with specific parameters."""\n    prompt: str = dspy.InputField()\n    genre: str = dspy.InputField()\n    story: str = dspy.OutputField()\n\n# Configure generation parameters\ncreative_gen = dspy.Predict(\n    CreativeWriting,\n    temperature=0.9,  # Higher = more creative\n    max_tokens=500\n)\n\nresult = creative_gen(\n    prompt="A robot discovers emotions",\n    genre="science fiction"\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-patterns-and-best-practices",children:"Common Patterns and Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-validation-in-signatures",children:"1. Validation in Signatures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ValidatedGeneration(dspy.Signature):\n    """Generate text with built-in validation."""\n    topic: str = dspy.InputField()\n    min_length: int = dspy.InputField()\n    text: str = dspy.OutputField(\n        desc="Text that must be at least min_length characters"\n    )\n    \n    def forward(self, **kwargs):\n        result = super().forward(**kwargs)\n        # Add custom validation\n        if len(result.text) < kwargs[\'min_length\']:\n            raise ValueError("Generated text too short")\n        return result\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-contextual-generation",children:"2. Contextual Generation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ContextualGeneration(dspy.Signature):\n    """Generate text based on context."""\n    context: str = dspy.InputField(desc="Background information")\n    question: str = dspy.InputField()\n    answer: str = dspy.OutputField(desc="Answer based on context")\n\n# Use for Q&A, summarization, etc.\ncontextual = dspy.Predict(ContextualGeneration)\nresult = contextual(\n    context="DSPy is a framework for programming LLMs...",\n    question="What is DSPy?"\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-iterative-refinement",children:"3. Iterative Refinement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class RefineText(dspy.Signature):\n    """Refine and improve existing text."""\n    original_text: str = dspy.InputField()\n    feedback: str = dspy.InputField()\n    refined_text: str = dspy.OutputField()\n\nrefiner = dspy.Predict(RefineText)\n\n# Initial generation\ntext = "DSPy is great for AI."\n\n# Refine based on feedback\nrefined = refiner(\n    original_text=text,\n    feedback="Make it more detailed and professional"\n)\nprint(refined.refined_text)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hands-on-exercise",children:"Hands-On Exercise"}),"\n",(0,s.jsx)(n.p,{children:"Try building a content generation pipeline:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Exercise: Build a social media content generator\n# 1. Generate post text based on topic\n# 2. Create relevant hashtags\n# 3. Suggest best posting time\n# 4. Generate an engaging caption\n\nclass SocialMediaContent(dspy.Signature):\n    """Generate complete social media content."""\n    topic: str = dspy.InputField()\n    platform: str = dspy.InputField(desc="twitter/instagram/linkedin")\n    post_text: str = dspy.OutputField()\n    hashtags: list[str] = dspy.OutputField()\n    best_time: str = dspy.OutputField()\n    caption: str = dspy.OutputField()\n\n# Your implementation here\nsocial_gen = dspy.ChainOfThought(SocialMediaContent)\ncontent = social_gen(\n    topic="DSPy tutorial launch",\n    platform="twitter"\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Over-constraining outputs"}),": Too many constraints can lead to poor results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ignoring token limits"}),": Always consider model token limits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Not validating outputs"}),": Add validation for critical applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Using Predict when ChainOfThought is better"}),": Complex tasks benefit from reasoning"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"In this module, you learned:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Basic text generation with DSPy"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Adding constraints and context"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Working with structured outputs"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Using Chain of Thought for complex generation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Best practices for generation tasks"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Next, we'll explore more advanced patterns like few-shot learning and prompt optimization."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)("div",{style:{textAlign:"center",marginTop:"2rem"},children:[(0,s.jsx)("a",{className:"button button--secondary button--lg",href:"/tutorial/module1/fundamentals",children:(0,s.jsx)(n.p,{children:"\u2190 Back to Fundamentals"})}),(0,s.jsx)("span",{style:{margin:"0 1rem"}}),(0,s.jsx)("a",{className:"button button--primary button--lg",href:"/tutorial/module2/few-shot-examples",children:(0,s.jsx)(n.p,{children:"Continue to Few-Shot Examples \u2192"})})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);