"use strict";(self.webpackChunkdspy_tutorial_site=self.webpackChunkdspy_tutorial_site||[]).push([[784],{2214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"module2/system-prompts","title":"System Prompts and Instructions in DSPy","description":"System prompts set the context and behavior for language models. DSPy reimagines this concept through signature docstrings, field descriptions, and automatic instruction optimization.","source":"@site/docs/module2/system-prompts.md","sourceDirName":"module2","slug":"/module2/system-prompts","permalink":"/dspy/tutorial/module2/system-prompts","draft":false,"unlisted":false,"editUrl":"https://github.com/vibe-school/dspy/tree/main/guide/dspy-tutorial-site/docs/module2/system-prompts.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Few-Shot Learning with DSPy","permalink":"/dspy/tutorial/module2/few-shot-examples"},"next":{"title":"Create a Page","permalink":"/dspy/tutorial/tutorial-basics/create-a-page"}}');var i=t(4848),r=t(8453);const a={sidebar_position:3},o="System Prompts and Instructions in DSPy",l={},c=[{value:"Traditional System Prompts vs DSPy",id:"traditional-system-prompts-vs-dspy",level:2},{value:"The Traditional Way",id:"the-traditional-way",level:3},{value:"The DSPy Way",id:"the-dspy-way",level:3},{value:"Components of DSPy Instructions",id:"components-of-dspy-instructions",level:2},{value:"1. Signature Docstrings",id:"1-signature-docstrings",level:3},{value:"2. Field Descriptions",id:"2-field-descriptions",level:3},{value:"3. Module-Level Instructions",id:"3-module-level-instructions",level:3},{value:"Advanced Instruction Patterns",id:"advanced-instruction-patterns",level:2},{value:"1. Role-Based Instructions",id:"1-role-based-instructions",level:3},{value:"2. Structured Instructions",id:"2-structured-instructions",level:3},{value:"3. Conditional Instructions",id:"3-conditional-instructions",level:3},{value:"Automatic Instruction Optimization",id:"automatic-instruction-optimization",level:2},{value:"Instruction Strategies",id:"instruction-strategies",level:2},{value:"1. Layered Instructions",id:"1-layered-instructions",level:3},{value:"2. Instruction Templates",id:"2-instruction-templates",level:3},{value:"3. Multi-Modal Instructions",id:"3-multi-modal-instructions",level:3},{value:"Practical Example: Customer Support Bot",id:"practical-example-customer-support-bot",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Clear and Specific Instructions",id:"1-clear-and-specific-instructions",level:3},{value:"2. Testable Instructions",id:"2-testable-instructions",level:3},{value:"3. Avoid Instruction Conflicts",id:"3-avoid-instruction-conflicts",level:3},{value:"Hands-On Exercise",id:"hands-on-exercise",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"system-prompts-and-instructions-in-dspy",children:"System Prompts and Instructions in DSPy"})}),"\n",(0,i.jsx)(n.p,{children:"System prompts set the context and behavior for language models. DSPy reimagines this concept through signature docstrings, field descriptions, and automatic instruction optimization."}),"\n",(0,i.jsx)(n.h2,{id:"traditional-system-prompts-vs-dspy",children:"Traditional System Prompts vs DSPy"}),"\n",(0,i.jsx)(n.h3,{id:"the-traditional-way",children:"The Traditional Way"}),"\n",(0,i.jsx)(n.p,{children:"In traditional LLM programming, system prompts are static strings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Traditional approach - manual system prompt\nmessages = [\n    {\n        "role": "system", \n        "content": "You are a helpful assistant that always responds in a professional tone. Follow these rules:..."\n    },\n    {\n        "role": "user",\n        "content": "Write a product description"\n    }\n]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"the-dspy-way",children:"The DSPy Way"}),"\n",(0,i.jsx)(n.p,{children:"DSPy integrates instructions directly into signatures:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import dspy\n\nclass ProductDescription(dspy.Signature):\n    """You are a professional copywriter creating compelling product descriptions.\n    Always highlight key benefits and use persuasive language."""\n    \n    product_name: str = dspy.InputField()\n    features: list[str] = dspy.InputField(desc="Key product features")\n    description: str = dspy.OutputField(desc="Compelling 2-3 paragraph description")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"components-of-dspy-instructions",children:"Components of DSPy Instructions"}),"\n",(0,i.jsx)(n.h3,{id:"1-signature-docstrings",children:"1. Signature Docstrings"}),"\n",(0,i.jsx)(n.p,{children:"The docstring acts as the primary instruction:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class EmailResponse(dspy.Signature):\n    """You are a customer service representative responding to emails.\n    Be empathetic, professional, and solution-oriented.\n    Always acknowledge the customer\'s concern before providing solutions."""\n    \n    customer_email: str = dspy.InputField()\n    response: str = dspy.OutputField()\n\n# The docstring becomes part of the prompt\nresponder = dspy.Predict(EmailResponse)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-field-descriptions",children:"2. Field Descriptions"}),"\n",(0,i.jsx)(n.p,{children:"Field descriptions provide specific guidance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class CodeReview(dspy.Signature):\n    """Review code for quality and suggest improvements."""\n    \n    code: str = dspy.InputField(\n        desc="The code to review"\n    )\n    language: str = dspy.InputField(\n        desc="Programming language (python, javascript, etc.)"\n    )\n    review: str = dspy.OutputField(\n        desc="Detailed review covering: 1) Code quality, 2) Best practices, 3) Potential bugs, 4) Performance suggestions"\n    )\n    rating: int = dspy.OutputField(\n        desc="Overall quality rating from 1-10"\n    )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-module-level-instructions",children:"3. Module-Level Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Some modules add their own instructions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# ChainOfThought automatically adds reasoning instructions\ncot_reviewer = dspy.ChainOfThought(CodeReview)\n\n# The module adds: "Let\'s think step by step..."\nresult = cot_reviewer(code="def add(a, b): return a + b", language="python")\nprint(result.reasoning)  # Shows the thinking process\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-instruction-patterns",children:"Advanced Instruction Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"1-role-based-instructions",children:"1. Role-Based Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Create specific personas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class RoleBasedGeneration(dspy.Signature):\n    """You are {role} with expertise in {domain}.\n    Your communication style is {style}.\n    Always consider {considerations}."""\n    \n    role: str = dspy.InputField()\n    domain: str = dspy.InputField()\n    style: str = dspy.InputField()\n    considerations: str = dspy.InputField()\n    query: str = dspy.InputField()\n    response: str = dspy.OutputField()\n\n# Dynamic role assignment\nexpert = dspy.Predict(RoleBasedGeneration)\nresult = expert(\n    role="a senior data scientist",\n    domain="machine learning and statistics",\n    style="technical but accessible",\n    considerations="business impact and implementation feasibility",\n    query="Should we use deep learning for customer churn prediction?"\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-structured-instructions",children:"2. Structured Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Break down complex instructions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class StructuredAnalysis(dspy.Signature):\n    """Perform a comprehensive analysis following this structure:\n    \n    1. CONTEXT: Understand the background and requirements\n    2. ANALYSIS: Break down the problem systematically\n    3. RECOMMENDATIONS: Provide actionable suggestions\n    4. RISKS: Identify potential challenges\n    5. NEXT STEPS: Outline implementation plan\n    \n    Be thorough but concise. Use bullet points where appropriate."""\n    \n    topic: str = dspy.InputField()\n    data: str = dspy.InputField(desc="Relevant data or information")\n    analysis: str = dspy.OutputField(desc="Complete structured analysis")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-conditional-instructions",children:"3. Conditional Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Instructions that adapt based on input:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class AdaptiveInstructions(dspy.Module):\n    def __init__(self):\n        # Different signatures for different scenarios\n        self.technical = dspy.Predict("""\n            Provide a highly technical explanation with implementation details.\n            Include code examples and performance considerations.\n            target_audience, topic -> explanation\n        """)\n        \n        self.simple = dspy.Predict("""\n            Explain in simple terms that anyone can understand.\n            Use analogies and avoid jargon.\n            target_audience, topic -> explanation\n        """)\n    \n    def forward(self, topic, audience_type):\n        if audience_type == "technical":\n            return self.technical(target_audience=audience_type, topic=topic)\n        else:\n            return self.simple(target_audience=audience_type, topic=topic)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"automatic-instruction-optimization",children:"Automatic Instruction Optimization"}),"\n",(0,i.jsx)(n.p,{children:"DSPy can automatically optimize instructions using COPRO:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dspy.teleprompt import COPRO\n\n# Define task with basic instructions\nclass MathWordProblem(dspy.Signature):\n    """Solve the math word problem step by step."""\n    problem: str = dspy.InputField()\n    solution: str = dspy.OutputField()\n\n# Training data\ntrainset = [\n    dspy.Example(\n        problem="If John has 5 apples and buys 3 more, how many does he have?",\n        solution="8"\n    ),\n    # ... more examples\n]\n\n# Metric to evaluate\ndef math_accuracy(example, pred, trace=None):\n    return example.solution.strip() == pred.solution.strip()\n\n# COPRO optimizes the instruction\noptimizer = COPRO(\n    metric=math_accuracy,\n    breadth=3,  # Number of instruction candidates\n    depth=2,    # Refinement iterations\n)\n\n# Compile with optimized instructions\noptimized_solver = optimizer.compile(\n    student=dspy.ChainOfThought(MathWordProblem),\n    trainset=trainset\n)\n\n# The instructions are now optimized!\nprint(optimized_solver.predictors()[0].signature.__doc__)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"instruction-strategies",children:"Instruction Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"1-layered-instructions",children:"1. Layered Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Build complexity gradually:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class LayeredInstructions(dspy.Module):\n    def __init__(self):\n        # Base layer - general behavior\n        self.base = dspy.Predict("""\n            You are a helpful assistant. Be accurate and clear.\n            input -> output\n        """)\n        \n        # Specific layer - task-specific rules\n        self.specific = dspy.Predict("""\n            Follow these specific rules for technical writing:\n            1. Use active voice\n            2. Define acronyms on first use\n            3. Include examples for complex concepts\n            content -> refined_content\n        """)\n    \n    def forward(self, input_text):\n        # Apply layers sequentially\n        base_output = self.base(input=input_text)\n        refined = self.specific(content=base_output.output)\n        return refined\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-instruction-templates",children:"2. Instruction Templates"}),"\n",(0,i.jsx)(n.p,{children:"Create reusable instruction patterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class InstructionTemplate:\n    @staticmethod\n    def create_analyst_signature(domain, output_format):\n        class_name = f"{domain}Analysis"\n        docstring = f"""\n        You are a {domain} analyst providing expert insights.\n        \n        Your analysis should:\n        - Be data-driven and objective\n        - Consider multiple perspectives\n        - Provide actionable recommendations\n        - Follow {output_format} format\n        \n        Always support claims with evidence.\n        """\n        \n        # Dynamically create signature\n        return type(class_name, (dspy.Signature,), {\n            "__doc__": docstring,\n            "data": dspy.InputField(desc="Data to analyze"),\n            "context": dspy.InputField(desc="Business context"),\n            "analysis": dspy.OutputField(desc=f"{output_format} formatted analysis")\n        })\n\n# Usage\nFinancialAnalysis = InstructionTemplate.create_analyst_signature(\n    "financial", "executive summary"\n)\nanalyzer = dspy.Predict(FinancialAnalysis)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-multi-modal-instructions",children:"3. Multi-Modal Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Combine different instruction types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class MultiModalInstructions(dspy.Signature):\n    """PRIMARY ROLE: You are a senior software architect.\n    \n    CONTEXT: You\'re reviewing code for a critical production system.\n    \n    GUIDELINES:\n    - Security is the top priority\n    - Performance is secondary\n    - Maintainability is important\n    \n    OUTPUT REQUIREMENTS:\n    1. Identify all security vulnerabilities\n    2. Suggest performance optimizations\n    3. Rate code quality (1-10)\n    4. Provide refactoring suggestions\n    \n    TONE: Professional but approachable"""\n    \n    code: str = dspy.InputField()\n    language: str = dspy.InputField()\n    security_issues: list[str] = dspy.OutputField()\n    performance_tips: list[str] = dspy.OutputField()\n    quality_score: int = dspy.OutputField()\n    refactor_suggestions: str = dspy.OutputField()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"practical-example-customer-support-bot",children:"Practical Example: Customer Support Bot"}),"\n",(0,i.jsx)(n.p,{children:"Let's build a complete customer support system with sophisticated instructions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Define the support signature with detailed instructions\nclass CustomerSupport(dspy.Signature):\n    """You are an experienced customer support specialist for TechCorp.\n    \n    PERSONALITY TRAITS:\n    - Empathetic and patient\n    - Solution-oriented\n    - Professional yet friendly\n    \n    RESPONSE STRUCTURE:\n    1. Acknowledge the customer\'s issue\n    2. Express understanding/empathy\n    3. Provide clear solution steps\n    4. Offer additional assistance\n    \n    POLICIES:\n    - Never admit fault without investigation\n    - Always offer a ticket number for follow-up\n    - Escalate to human agent for: legal issues, threats, or complex technical problems\n    \n    TONE: Warm and helpful, avoiding corporate jargon"""\n    \n    customer_message: str = dspy.InputField(\n        desc="The customer\'s message or complaint"\n    )\n    customer_history: str = dspy.InputField(\n        desc="Previous interactions and purchase history"\n    )\n    \n    response: str = dspy.OutputField(\n        desc="Complete customer response following all guidelines"\n    )\n    ticket_number: str = dspy.OutputField(\n        desc="Reference ticket number (format: TECH-YYYY-MM-XXXXX)"\n    )\n    escalation_needed: bool = dspy.OutputField(\n        desc="Whether this needs human agent escalation"\n    )\n\n# Create the support module\nsupport_bot = dspy.ChainOfThought(CustomerSupport)\n\n# Example usage\nresult = support_bot(\n    customer_message="My laptop crashed and I lost all my work! This is the third time this month!",\n    customer_history="Premium customer, 3 previous technical issues this month"\n)\n\nprint(f"Response: {result.response}")\nprint(f"Ticket: {result.ticket_number}")\nprint(f"Escalate: {result.escalation_needed}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-clear-and-specific-instructions",children:"1. Clear and Specific Instructions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# \u274c Vague\nclass VagueSignature(dspy.Signature):\n    """Be helpful and nice."""\n    input: str = dspy.InputField()\n    output: str = dspy.OutputField()\n\n# \u2705 Specific\nclass SpecificSignature(dspy.Signature):\n    """As a technical documentation expert:\n    1. Use clear, concise language\n    2. Include code examples for all concepts\n    3. Follow Google\'s documentation style guide\n    4. Assume reader has intermediate programming knowledge"""\n    concept: str = dspy.InputField()\n    documentation: str = dspy.OutputField()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-testable-instructions",children:"2. Testable Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Make instructions verifiable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class TestableInstructions(dspy.Signature):\n    """Generate a summary that:\n    - Is exactly 3 sentences long\n    - Contains no more than 50 words\n    - Mentions the main topic in the first sentence\n    - Includes a conclusion in the last sentence"""\n    \n    text: str = dspy.InputField()\n    summary: str = dspy.OutputField()\n\n# Easy to verify these constraints programmatically\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-avoid-instruction-conflicts",children:"3. Avoid Instruction Conflicts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# \u274c Conflicting instructions\nclass ConflictingSignature(dspy.Signature):\n    """Be extremely detailed and thorough.\n    Keep responses under 50 words."""  # Conflict!\n    \n# \u2705 Coherent instructions\nclass CoherentSignature(dspy.Signature):\n    """Provide a comprehensive analysis within these constraints:\n    - Maximum 200 words\n    - Cover: problem, solution, and impact\n    - Use bullet points for clarity"""\n'})}),"\n",(0,i.jsx)(n.h2,{id:"hands-on-exercise",children:"Hands-On Exercise"}),"\n",(0,i.jsx)(n.p,{children:"Create a code documentation generator with sophisticated instructions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Exercise: Build a documentation generator\n# 1. Create signature with role-based instructions\n# 2. Include multiple output formats (docstring, README, API docs)\n# 3. Add style guidelines\n# 4. Implement quality checks\n\nclass CodeDocGenerator(dspy.Signature):\n    """You are a technical writer specializing in developer documentation.\n    \n    Your task is to create clear, comprehensive documentation that follows these principles:\n    - Write for developers with varying experience levels\n    - Include practical examples\n    - Follow the Diataxis framework (tutorials, how-tos, reference, explanation)\n    - Use active voice and present tense\n    \n    # Your implementation here...\n    """\n    \n    code: str = dspy.InputField()\n    doc_type: str = dspy.InputField(desc="docstring, readme, or api")\n    # Add output fields...\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Over-instructing"}),": Too many rules can confuse the model"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Contradictory instructions"}),": Ensure all guidelines align"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignoring model capabilities"}),": Some models follow instructions better than others"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static instructions"}),": Not leveraging DSPy's optimization capabilities"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"In this module, you learned:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 How DSPy handles system prompts through signatures"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Using docstrings and field descriptions effectively"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Automatic instruction optimization with COPRO"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Advanced patterns for complex instructions"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Best practices for instruction design"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Next, we'll explore structured outputs with Pydantic integration."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center",marginTop:"2rem"},children:[(0,i.jsx)("a",{className:"button button--secondary button--lg",href:"/dspy/tutorial/module2/few-shot-examples",children:(0,i.jsx)(n.p,{children:"\u2190 Back to Few-Shot Examples"})}),(0,i.jsx)("span",{style:{margin:"0 1rem"}}),(0,i.jsx)("a",{className:"button button--primary button--lg",href:"/dspy/tutorial/module2/structured-outputs",children:(0,i.jsx)(n.p,{children:"Continue to Structured Outputs \u2192"})})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);