"use strict";(self.webpackChunkdspy_tutorial_site=self.webpackChunkdspy_tutorial_site||[]).push([[505],{2326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"module2/few-shot-examples","title":"Few-Shot Learning with DSPy","description":"Few-shot learning is a powerful technique where you provide examples to guide the model\'s behavior. DSPy takes this concept and supercharges it with automatic example selection and optimization.","source":"@site/docs/module2/few-shot-examples.md","sourceDirName":"module2","slug":"/module2/few-shot-examples","permalink":"/dspy/tutorial/module2/few-shot-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/vibe-school/dspy/tree/main/guide/dspy-tutorial-site/docs/module2/few-shot-examples.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Basic Generation with DSPy","permalink":"/dspy/tutorial/module2/basic-generation"},"next":{"title":"System Prompts and Instructions in DSPy","permalink":"/dspy/tutorial/module2/system-prompts"}}');var s=n(4848),a=n(8453);const l={sidebar_position:2},r="Few-Shot Learning with DSPy",o={},p=[{value:"Traditional Few-Shot vs DSPy",id:"traditional-few-shot-vs-dspy",level:2},{value:"The Traditional Approach",id:"the-traditional-approach",level:3},{value:"The DSPy Approach",id:"the-dspy-approach",level:3},{value:"Manual Few-Shot Examples in DSPy",id:"manual-few-shot-examples-in-dspy",level:2},{value:"Automatic Few-Shot Optimization",id:"automatic-few-shot-optimization",level:2},{value:"BootstrapFewShot Optimizer",id:"bootstrapfewshot-optimizer",level:3},{value:"Advanced Few-Shot Patterns",id:"advanced-few-shot-patterns",level:2},{value:"1. Dynamic Example Selection",id:"1-dynamic-example-selection",level:3},{value:"2. Example Quality Filtering",id:"2-example-quality-filtering",level:3},{value:"3. Retrieval-Augmented Few-Shot",id:"3-retrieval-augmented-few-shot",level:3},{value:"Practical Example: Multi-Class Classification",id:"practical-example-multi-class-classification",level:2},{value:"Best Practices for Few-Shot Learning",id:"best-practices-for-few-shot-learning",level:2},{value:"1. Example Diversity",id:"1-example-diversity",level:3},{value:"2. Example Format Consistency",id:"2-example-format-consistency",level:3},{value:"3. Progressive Example Complexity",id:"3-progressive-example-complexity",level:3},{value:"Hands-On Exercise",id:"hands-on-exercise",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"few-shot-learning-with-dspy",children:"Few-Shot Learning with DSPy"})}),"\n",(0,s.jsx)(t.p,{children:"Few-shot learning is a powerful technique where you provide examples to guide the model's behavior. DSPy takes this concept and supercharges it with automatic example selection and optimization."}),"\n",(0,s.jsx)(t.h2,{id:"traditional-few-shot-vs-dspy",children:"Traditional Few-Shot vs DSPy"}),"\n",(0,s.jsx)(t.h3,{id:"the-traditional-approach",children:"The Traditional Approach"}),"\n",(0,s.jsx)(t.p,{children:"In traditional prompting, you manually craft and maintain examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Traditional few-shot prompt (tedious and static)\nprompt = """\nClassify the sentiment of these tweets:\n\nExample 1:\nTweet: "I love this product! Best purchase ever!"\nSentiment: positive\n\nExample 2:\nTweet: "Completely disappointed. Waste of money."\nSentiment: negative\n\nExample 3:\nTweet: "It\'s okay, nothing special."\nSentiment: neutral\n\nTweet: "This exceeded all my expectations!"\nSentiment:"""\n'})}),"\n",(0,s.jsx)(t.h3,{id:"the-dspy-approach",children:"The DSPy Approach"}),"\n",(0,s.jsx)(t.p,{children:"DSPy automates example selection and optimization:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import dspy\n\n# Define the task\nclass SentimentClassification(dspy.Signature):\n    """Classify tweet sentiment as positive, negative, or neutral."""\n    tweet: str = dspy.InputField()\n    sentiment: str = dspy.OutputField(desc="positive, negative, or neutral")\n\n# DSPy automatically handles examples through optimization\nclassifier = dspy.Predict(SentimentClassification)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"manual-few-shot-examples-in-dspy",children:"Manual Few-Shot Examples in DSPy"}),"\n",(0,s.jsx)(t.p,{children:"While DSPy excels at automatic optimization, you can still provide manual examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Method 1: Examples in the signature\nclass JokeGeneration(dspy.Signature):\n    """Generate jokes following the style of these examples:\n    \n    Topic: AI -> Setup: Why did the AI go to therapy?\n    Punchline: It had too many deep learning issues!\n    \n    Topic: Python -> Setup: Why do Python programmers prefer dark mode?\n    Punchline: Because light attracts bugs!\n    """\n    topic: str = dspy.InputField()\n    setup: str = dspy.OutputField()\n    punchline: str = dspy.OutputField()\n\n# Method 2: Using dspy.Example\njoke_examples = [\n    dspy.Example(\n        topic="AI",\n        setup="Why did the AI go to therapy?",\n        punchline="It had too many deep learning issues!"\n    ),\n    dspy.Example(\n        topic="Python",\n        setup="Why do Python programmers prefer dark mode?",\n        punchline="Because light attracts bugs!"\n    )\n]\n'})}),"\n",(0,s.jsx)(t.h2,{id:"automatic-few-shot-optimization",children:"Automatic Few-Shot Optimization"}),"\n",(0,s.jsx)(t.p,{children:"This is where DSPy truly shines - automatically finding the best examples:"}),"\n",(0,s.jsx)(t.h3,{id:"bootstrapfewshot-optimizer",children:"BootstrapFewShot Optimizer"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from dspy.teleprompt import BootstrapFewShot\n\n# Create training data\ntrainset = [\n    dspy.Example(tweet="Amazing service!", sentiment="positive"),\n    dspy.Example(tweet="Terrible experience", sentiment="negative"),\n    dspy.Example(tweet="It\'s fine", sentiment="neutral"),\n    # ... more examples\n]\n\n# Define metric\ndef sentiment_accuracy(example, pred, trace=None):\n    return example.sentiment.lower() == pred.sentiment.lower()\n\n# Create optimizer\noptimizer = BootstrapFewShot(\n    metric=sentiment_accuracy,\n    max_bootstrapped_demos=3  # Number of examples to include\n)\n\n# Compile with automatic example selection\noptimized_classifier = optimizer.compile(\n    student=dspy.Predict(SentimentClassification),\n    trainset=trainset\n)\n\n# Now it includes the best examples automatically\nresult = optimized_classifier(tweet="This product is fantastic!")\nprint(result.sentiment)  # "positive"\n'})}),"\n",(0,s.jsx)(t.h2,{id:"advanced-few-shot-patterns",children:"Advanced Few-Shot Patterns"}),"\n",(0,s.jsx)(t.h3,{id:"1-dynamic-example-selection",children:"1. Dynamic Example Selection"}),"\n",(0,s.jsx)(t.p,{children:"Select examples based on the input:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'class DynamicExampleSelector(dspy.Module):\n    def __init__(self, examples_by_category):\n        self.examples_by_category = examples_by_category\n        self.classifier = dspy.ChainOfThought(SentimentClassification)\n    \n    def forward(self, tweet, category=None):\n        # Select relevant examples\n        if category and category in self.examples_by_category:\n            examples = self.examples_by_category[category]\n            # Include examples in context\n            context = "\\n".join([\n                f"Tweet: {ex.tweet} -> Sentiment: {ex.sentiment}"\n                for ex in examples[:3]\n            ])\n            return self.classifier(tweet=f"{context}\\n\\nTweet: {tweet}")\n        return self.classifier(tweet=tweet)\n\n# Usage\nselector = DynamicExampleSelector({\n    "product": product_examples,\n    "service": service_examples,\n    "general": general_examples\n})\n'})}),"\n",(0,s.jsx)(t.h3,{id:"2-example-quality-filtering",children:"2. Example Quality Filtering"}),"\n",(0,s.jsx)(t.p,{children:"Ensure only high-quality examples are used:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'class QualityFilteredFewShot(dspy.Module):\n    def __init__(self, signature, examples, quality_threshold=0.8):\n        self.predictor = dspy.Predict(signature)\n        self.quality_checker = dspy.Predict("example, prediction -> quality_score")\n        self.filtered_examples = self._filter_examples(examples, quality_threshold)\n    \n    def _filter_examples(self, examples, threshold):\n        filtered = []\n        for ex in examples:\n            # Test example quality\n            pred = self.predictor(**ex.inputs())\n            quality = self.quality_checker(\n                example=str(ex),\n                prediction=str(pred)\n            )\n            if float(quality.quality_score) >= threshold:\n                filtered.append(ex)\n        return filtered\n'})}),"\n",(0,s.jsx)(t.h3,{id:"3-retrieval-augmented-few-shot",children:"3. Retrieval-Augmented Few-Shot"}),"\n",(0,s.jsx)(t.p,{children:"Dynamically retrieve relevant examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'class RetrievalAugmentedFewShot(dspy.Module):\n    def __init__(self, signature, example_bank):\n        self.classifier = dspy.Predict(signature)\n        self.example_bank = example_bank  # Vector store of examples\n        self.retriever = dspy.Predict("query -> relevant_examples")\n    \n    def forward(self, **kwargs):\n        # Retrieve relevant examples\n        query = str(kwargs)\n        relevant = self.retriever(query=query)\n        \n        # Create few-shot prompt with retrieved examples\n        context = self._format_examples(relevant.relevant_examples)\n        \n        # Add context to inputs\n        enhanced_inputs = {**kwargs, "examples": context}\n        return self.classifier(**enhanced_inputs)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"practical-example-multi-class-classification",children:"Practical Example: Multi-Class Classification"}),"\n",(0,s.jsx)(t.p,{children:"Let's build a complete few-shot classifier for customer support tickets:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Define the classification task\nclass TicketClassification(dspy.Signature):\n    """Classify customer support tickets into categories."""\n    ticket_text: str = dspy.InputField()\n    category: str = dspy.OutputField(\n        desc="billing, technical, account, or general"\n    )\n    priority: str = dspy.OutputField(desc="high, medium, or low")\n    \n# Create training examples\ntrain_tickets = [\n    dspy.Example(\n        ticket_text="My credit card was charged twice",\n        category="billing",\n        priority="high"\n    ),\n    dspy.Example(\n        ticket_text="How do I reset my password?",\n        category="account",\n        priority="medium"\n    ),\n    dspy.Example(\n        ticket_text="The app crashes when I open it",\n        category="technical",\n        priority="high"\n    ),\n    # ... more examples\n]\n\n# Define evaluation metric\ndef classification_accuracy(example, pred, trace=None):\n    category_match = example.category == pred.category\n    priority_match = example.priority == pred.priority\n    return (category_match and priority_match)\n\n# Optimize with few-shot learning\noptimizer = BootstrapFewShot(\n    metric=classification_accuracy,\n    max_bootstrapped_demos=4,\n    max_labeled_demos=4\n)\n\n# Compile the classifier\noptimized_classifier = optimizer.compile(\n    student=dspy.ChainOfThought(TicketClassification),\n    trainset=train_tickets\n)\n\n# Use the optimized classifier\nnew_ticket = "I can\'t log into my account and it\'s urgent"\nresult = optimized_classifier(ticket_text=new_ticket)\nprint(f"Category: {result.category}")  # "account"\nprint(f"Priority: {result.priority}")   # "high"\n'})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices-for-few-shot-learning",children:"Best Practices for Few-Shot Learning"}),"\n",(0,s.jsx)(t.h3,{id:"1-example-diversity",children:"1. Example Diversity"}),"\n",(0,s.jsx)(t.p,{children:"Ensure your examples cover different cases:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def create_diverse_examples():\n    return [\n        # Positive examples\n        dspy.Example(text="Absolutely love it!", sentiment="positive"),\n        dspy.Example(text="Best decision ever", sentiment="positive"),\n        \n        # Negative examples  \n        dspy.Example(text="Complete disaster", sentiment="negative"),\n        dspy.Example(text="Waste of time", sentiment="negative"),\n        \n        # Neutral examples\n        dspy.Example(text="It\'s okay", sentiment="neutral"),\n        dspy.Example(text="Nothing special", sentiment="neutral"),\n        \n        # Edge cases\n        dspy.Example(text="Not bad, but not great", sentiment="neutral"),\n        dspy.Example(text="\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d", sentiment="positive"),\n    ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"2-example-format-consistency",children:"2. Example Format Consistency"}),"\n",(0,s.jsx)(t.p,{children:"Keep examples consistent:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'class ConsistentExampleFormatter:\n    @staticmethod\n    def format_example(example):\n        """Ensure consistent example format"""\n        return dspy.Example(\n            input_text=example.get("text", "").strip(),\n            output_label=example.get("label", "").lower(),\n            metadata={\n                "source": example.get("source", "unknown"),\n                "confidence": example.get("confidence", 1.0)\n            }\n        )\n'})}),"\n",(0,s.jsx)(t.h3,{id:"3-progressive-example-complexity",children:"3. Progressive Example Complexity"}),"\n",(0,s.jsx)(t.p,{children:"Start simple and increase complexity:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Level 1: Basic examples\nbasic_examples = [\n    dspy.Example(math="2+2", answer="4"),\n    dspy.Example(math="5*3", answer="15")\n]\n\n# Level 2: Intermediate examples\nintermediate_examples = [\n    dspy.Example(math="(10+5)*2", answer="30"),\n    dspy.Example(math="100/4-5", answer="20")\n]\n\n# Level 3: Complex examples\ncomplex_examples = [\n    dspy.Example(math="sqrt(16)+3^2", answer="13"),\n    dspy.Example(math="log(100,10)*5", answer="10")\n]\n'})}),"\n",(0,s.jsx)(t.h2,{id:"hands-on-exercise",children:"Hands-On Exercise"}),"\n",(0,s.jsx)(t.p,{children:"Build a few-shot email classifier:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Exercise: Create an email priority classifier\n# 1. Define signature for email classification\n# 2. Create diverse training examples\n# 3. Implement custom metric\n# 4. Optimize with BootstrapFewShot\n# 5. Test on new emails\n\nclass EmailPriority(dspy.Signature):\n    """Classify email priority based on content."""\n    subject: str = dspy.InputField()\n    body: str = dspy.InputField()\n    sender: str = dspy.InputField()\n    priority: str = dspy.OutputField(desc="urgent, high, normal, or low")\n\n# Your implementation here...\n'})}),"\n",(0,s.jsx)(t.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Too Many Examples"}),": More isn't always better - quality over quantity"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Biased Examples"}),": Ensure balanced representation across classes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Overfitting to Examples"}),": Test with diverse inputs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Ignoring Example Order"}),": DSPy optimizers handle this, but be aware when doing manual selection"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(t.p,{children:"In this module, you learned:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\u2705 The difference between traditional few-shot and DSPy approaches"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 How to use manual examples in DSPy"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Automatic few-shot optimization with BootstrapFewShot"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Advanced patterns like dynamic selection and retrieval"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Best practices for example creation and management"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Next, we'll explore how system prompts and instructions work in DSPy."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)("div",{style:{textAlign:"center",marginTop:"2rem"},children:[(0,s.jsx)("a",{className:"button button--secondary button--lg",href:"/dspy/tutorial/module2/basic-generation",children:(0,s.jsx)(t.p,{children:"\u2190 Back to Basic Generation"})}),(0,s.jsx)("span",{style:{margin:"0 1rem"}}),(0,s.jsx)("a",{className:"button button--primary button--lg",href:"/dspy/tutorial/module2/system-prompts",children:(0,s.jsx)(t.p,{children:"Continue to System Prompts \u2192"})})]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function l(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);