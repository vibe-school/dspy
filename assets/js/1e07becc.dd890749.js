"use strict";(self.webpackChunkdspy_tutorial_site=self.webpackChunkdspy_tutorial_site||[]).push([[487],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},8765:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"module1/fundamentals","title":"DSPy Fundamentals","description":"Welcome to Module 1! Let\'s understand what makes DSPy different from traditional prompting and learn the core concepts.","source":"@site/docs/module1/fundamentals.md","sourceDirName":"module1","slug":"/module1/fundamentals","permalink":"/dspy/tutorial/module1/fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/vibe-school/dspy/tree/main/guide/dspy-tutorial-site/docs/module1/fundamentals.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Environment Setup","permalink":"/dspy/tutorial/setup"},"next":{"title":"Basic Generation with DSPy","permalink":"/dspy/tutorial/module2/basic-generation"}}');var s=t(4848),r=t(8453);const o={sidebar_position:1},a="DSPy Fundamentals",l={},d=[{value:"Traditional Prompting vs DSPy",id:"traditional-prompting-vs-dspy",level:2},{value:"The Problem with Traditional Prompting",id:"the-problem-with-traditional-prompting",level:3},{value:"The DSPy Approach",id:"the-dspy-approach",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Signatures",id:"1-signatures",level:3},{value:"2. Modules",id:"2-modules",level:3},{value:"3. Metrics",id:"3-metrics",level:3},{value:"4. Optimizers",id:"4-optimizers",level:3},{value:"Your First DSPy Program",id:"your-first-dspy-program",level:2},{value:"DSPy Workflow",id:"dspy-workflow",level:2},{value:"Key Advantages",id:"key-advantages",level:2},{value:"Hands-On Exercise",id:"hands-on-exercise",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Summary",id:"summary",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dspy-fundamentals",children:"DSPy Fundamentals"})}),"\n",(0,s.jsx)(n.p,{children:"Welcome to Module 1! Let's understand what makes DSPy different from traditional prompting and learn the core concepts."}),"\n",(0,s.jsx)(n.h2,{id:"traditional-prompting-vs-dspy",children:"Traditional Prompting vs DSPy"}),"\n",(0,s.jsx)(n.h3,{id:"the-problem-with-traditional-prompting",children:"The Problem with Traditional Prompting"}),"\n",(0,s.jsx)(n.p,{children:"When working with LLMs traditionally, we spend countless hours:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Crafting the perfect prompt"}),"\n",(0,s.jsx)(n.li,{children:"Adding examples manually"}),"\n",(0,s.jsx)(n.li,{children:"Tweaking wording for better results"}),"\n",(0,s.jsx)(n.li,{children:"Managing prompt versions"}),"\n",(0,s.jsx)(n.li,{children:"Dealing with model-specific quirks"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Traditional approach - manual prompt engineering\nprompt = """You are a helpful assistant that classifies sentiment.\nGiven a tweet, classify it as positive, negative, or neutral.\n\nExamples:\nTweet: "I love this product!" -> positive\nTweet: "This is terrible" -> negative\nTweet: "It\'s okay I guess" -> neutral\n\nTweet: "Best day ever!"\nClassification:"""\n\nresponse = openai_client.chat.completions.create(\n    model="gpt-4",\n    messages=[{"role": "user", "content": prompt}]\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"the-dspy-approach",children:"The DSPy Approach"}),"\n",(0,s.jsx)(n.p,{children:"DSPy transforms this into:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import dspy\n\n# Define what you want, not how to ask for it\nclass SentimentClassification(dspy.Signature):\n    """Classify the sentiment of a tweet."""\n    tweet: str = dspy.InputField()\n    sentiment: str = dspy.OutputField(desc="positive, negative, or neutral")\n\n# Create a predictor\nclassify = dspy.Predict(SentimentClassification)\n\n# Use it\nresult = classify(tweet="Best day ever!")\nprint(result.sentiment)  # "positive"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.p,{children:"DSPy is built on four fundamental components that work together to create powerful LLM applications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"                            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                            \u2502   DSPy Program  \u2502\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                     \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                            \u2502                            \u2502\n   \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502Signatures\u2502              \u2502   Modules   \u2502            \u2502   Optimizers    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                           \u2502                             \u2502\n   Input/Output              Predict, CoT,                 BootstrapFewShot,\n   Specifications            ReAct, etc.                   COPRO, MIPROv2\n"})}),"\n",(0,s.jsx)(n.h3,{id:"1-signatures",children:"1. Signatures"}),"\n",(0,s.jsx)(n.p,{children:"Signatures define the input/output behavior of your LLM calls. Think of them as function signatures for LLMs."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Simple string format\nsimple_sig = dspy.Predict("question -> answer")\n\n# Multiple inputs/outputs\nmulti_sig = dspy.Predict("context, question -> answer, confidence")\n\n# Class-based with types and descriptions\nclass QASignature(dspy.Signature):\n    """Answer questions based on context."""\n    context: str = dspy.InputField(desc="Relevant background information")\n    question: str = dspy.InputField()\n    answer: str = dspy.OutputField(desc="Detailed answer")\n    confidence: float = dspy.OutputField(desc="Confidence score 0-1")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-modules",children:"2. Modules"}),"\n",(0,s.jsx)(n.p,{children:"Modules are building blocks that process signatures. They implement different prompting strategies."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Predict - Basic prediction\npredict = dspy.Predict(SentimentClassification)\n\n# ChainOfThought - Adds reasoning step\ncot = dspy.ChainOfThought(SentimentClassification)\n\n# ProgramOfThought - Generates executable code\npot = dspy.ProgramOfThought(MathProblem)\n\n# ReAct - Reasoning + Acting with tools\nreact = dspy.ReAct(ResearchQuestion, tools=[search_tool])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-metrics",children:"3. Metrics"}),"\n",(0,s.jsx)(n.p,{children:"Metrics measure how well your program performs. They're functions that return a score."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def exact_match(example, prediction, trace=None):\n    """Check if prediction matches expected output exactly."""\n    return example.answer.lower() == prediction.answer.lower()\n\ndef quality_metric(example, prediction, trace=None):\n    """More complex metric using another LLM call."""\n    assessment = dspy.Predict("text, criteria -> score")(\n        text=prediction.answer,\n        criteria="Is this answer accurate and helpful?"\n    )\n    return float(assessment.score) > 0.8\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-optimizers",children:"4. Optimizers"}),"\n",(0,s.jsx)(n.p,{children:"Optimizers automatically improve your program by finding better prompts, examples, or instructions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from dspy.teleprompt import BootstrapFewShot\n\n# Create optimizer\noptimizer = BootstrapFewShot(metric=exact_match)\n\n# Compile your program with training data\noptimized_program = optimizer.compile(\n    student=predict,\n    trainset=training_examples\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"your-first-dspy-program",children:"Your First DSPy Program"}),"\n",(0,s.jsx)(n.p,{children:"Let's build a complete example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import dspy\nimport os\n\n# 1. Configure DSPy with your LLM\ndspy.configure(lm=dspy.LM("openai/gpt-4o-mini"))\n\n# 2. Define your task signature\nclass JokeGeneration(dspy.Signature):\n    """Generate a joke based on a topic."""\n    topic: str = dspy.InputField(desc="The topic for the joke")\n    setup: str = dspy.OutputField(desc="The setup of the joke")\n    punchline: str = dspy.OutputField(desc="The punchline")\n\n# 3. Create a module\njoke_generator = dspy.ChainOfThought(JokeGeneration)\n\n# 4. Use it!\nresult = joke_generator(topic="artificial intelligence")\nprint(f"Setup: {result.setup}")\nprint(f"Punchline: {result.punchline}")\nprint(f"Reasoning: {result.reasoning}")  # ChainOfThought adds this\n'})}),"\n",(0,s.jsx)(n.h2,{id:"dspy-workflow",children:"DSPy Workflow"}),"\n",(0,s.jsx)(n.p,{children:"The typical DSPy workflow consists of 4 steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Define"}),": Create signatures for your tasks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build"}),": Compose modules into programs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize"}),": Use metrics and optimizers to improve"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deploy"}),": Use your optimized program in production"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Complete workflow example\n# 1. Define\nclass TextSummary(dspy.Signature):\n    """Summarize long text concisely."""\n    text: str = dspy.InputField()\n    summary: str = dspy.OutputField()\n\n# 2. Build\nsummarizer = dspy.ChainOfThought(TextSummary)\n\n# 3. Optimize (with training data)\nfrom dspy.teleprompt import BootstrapFewShot\n\ndef summary_quality(example, pred, trace=None):\n    # Check if summary captures key points\n    return len(pred.summary.split()) < 50  # Simple length check\n\noptimizer = BootstrapFewShot(metric=summary_quality, max_bootstrapped_demos=3)\noptimized_summarizer = optimizer.compile(summarizer, trainset=train_examples)\n\n# 4. Deploy\nproduction_summary = optimized_summarizer(text="Your long document here...")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-advantages",children:"Key Advantages"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modularity"}),": Build complex programs from simple components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimization"}),": Automatically improve performance with data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Portability"}),": Switch between LLMs without rewriting prompts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintainability"}),": Version and test your LLM programs systematically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interpretability"}),": Understand why your program makes decisions"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"hands-on-exercise",children:"Hands-On Exercise"}),"\n",(0,s.jsx)(n.p,{children:"Try this exercise to solidify your understanding:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Exercise: Create a translation program\n# 1. Define a signature for translation\n# 2. Use ChainOfThought module\n# 3. Test with different languages\n\n# Your code here:\nclass Translation(dspy.Signature):\n    """Translate text between languages."""\n    text: str = dspy.InputField()\n    source_language: str = dspy.InputField()\n    target_language: str = dspy.OutputField()\n    translation: str = dspy.OutputField()\n\ntranslator = dspy.ChainOfThought(Translation)\nresult = translator(\n    text="Hello world",\n    source_language="English",\n    target_language="Spanish"\n)\nprint(result.translation)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Over-complicating signatures"}),": Start simple, add complexity as needed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ignoring metrics"}),": Good metrics are crucial for optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Not using traces"}),": Traces help debug and understand your program"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Skipping optimization"}),": Even basic optimization significantly improves results"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"In this module, you learned:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 How DSPy differs from traditional prompting"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 The four core concepts: Signatures, Modules, Metrics, Optimizers"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 The DSPy workflow: Define, Build, Optimize, Deploy"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 How to create your first DSPy program"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Next, we'll dive deeper into atomic prompts and basic DSPy usage patterns."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)("div",{style:{textAlign:"center",marginTop:"2rem"},children:[(0,s.jsx)("a",{className:"button button--secondary button--lg",href:"/dspy/tutorial/setup",children:(0,s.jsx)(n.p,{children:"\u2190 Back to Setup"})}),(0,s.jsx)("span",{style:{margin:"0 1rem"}}),(0,s.jsx)("a",{className:"button button--primary button--lg",href:"/dspy/tutorial/module2/basic-generation",children:(0,s.jsx)(n.p,{children:"Continue to Module 2 \u2192"})})]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);